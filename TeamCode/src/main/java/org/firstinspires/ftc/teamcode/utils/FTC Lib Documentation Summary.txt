The FTCLib documentation provides a comprehensive guide for developers working on FTC
robotics projects, with tools for controllers, subsystems, kinematics, odometry, and more.
Here's a summary of key sections:

1. Subsystems
Subsystems are key organizational units that encapsulate hardware and manage robot functions.
They prevent multiple commands from conflicting and allow for easier code management.
Developers can create subsystems by extending SubsystemBase or implementing the Subsystem
interface directly. This structure ensures efficient scheduling of commands and resource
management. Each subsystem can also have a "default command" that runs automatically when no
other command is using it.

2. Controllers
FTCLib offers various controllers, including PID, PD, P, and PIDF. These controllers help in
precise control of robot mechanisms by adjusting outputs based on feedback from sensors. The
PIDFController is the most versatile, allowing gains to be adjusted dynamically. It uses
calculate() in each control loop iteration to produce outputs, and developers can set
tolerances for tracking setpoints accurately.

3. Odometry
Odometry in FTCLib helps track the robot's position on the field. Differential and holonomic
odometry methods are supported, and precise tuning of parameters such as track width and
encoder values is required for accurate position tracking. FTCLib provides classes like
DifferentialOdometry and HolonomicOdometry to facilitate this.

4. Kinematics
FTCLib provides tools for various drive systems (differential, mecanum, and swerve). These are
used to calculate wheel speeds and handle robot motion. For example, the
DifferentialDriveKinematics and MecanumDriveKinematics classes simplify control for their
respective systems by converting desired velocities into motor speeds.

5. Pathing
Pathing tools, including Pure Pursuit and Trajectory, enable smooth movement planning.
Developers can generate and manipulate trajectories with constraints like speed limits and
target positions. FTCLib also includes a RamseteController to assist with trajectory following,
adjusting the robot's path dynamically based on feedback.

6. Vision
FTCLib offers vision tools, such as Ring Stack Detection and High Goal Detection, which enable
autonomous tasks based on visual input. This feature simplifies integration with cameras and
sensors to detect objects or targets during a match.

These tools make it easier to develop efficient and scalable robotics code for FTC competitions
by providing abstractions that manage robot control and simplify pathing, feedback, and
vision-based tasks.

For more detailed insights and code examples, you can explore the FTCLib documentation.